webpackJsonp([0],{

/***/ 136:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(9);

var _react2 = _interopRequireDefault(_react);

var _pureRenderDecorator = __webpack_require__(294);

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _reactRouter = __webpack_require__(137);

var _reactRedux = __webpack_require__(126);

var _propTypes = __webpack_require__(7);

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import { is, fromJS} from 'immutable';
// import {Tool} from '../Config/Tool';
// import {Header,template} from './common/mixin';
// import template from './common/template';


var Main = function (_Component) {
    _inherits(Main, _Component);

    function Main() {
        _classCallCheck(this, Main);

        var _this = _possibleConstructorReturn(this, (Main.__proto__ || Object.getPrototypeOf(Main)).call(this));

        _this.state = {
            saleMoney: '', //销售金额
            name: '', //姓名
            phone: '', //电话
            products: [], //销售商品
            postProduct: [], //上传的商品信息
            serverId: '', // 图片id
            picSrc: '', //图片src
            saleOldvalue: '', //金额上次input值
            preventMountSubmit: true };

        _this.changeValue = function (type, event) {
            if (type === 'money') {
                var value = event.target.value;
                if (/^\d*?\.?\d{0,2}?$/gi.test(value)) {
                    if (/^0+[1-9]+/.test(value)) {
                        value = value.replace(/^0+/, '');
                    }
                    if (/^0+0\./.test(value)) {
                        value = value.replace(/^0+/, '0');
                    }
                    value = value.replace(/^\./gi, '0.');
                    _this.state.saleOldvalue = value;
                    _this.state.inputLength = value.length;
                } else {
                    value = _this.state.saleOldvalue;
                }
                _this.setState({
                    saleMoney: value
                });
            } else if (type === 'name') {
                _this.setState({
                    name: event.target.value
                });
            } else if (type === 'phone') {
                var _value = event.target.value.replace(/\D/gi, '');
                _this.setState({
                    phone: _value
                });
            }
        };

        _this.chooseImage = function () {
            Tool.alert('测试环境无法获取微信签名');
            var self = _this;
            wx.chooseImage({
                count: 1, // 默认9
                sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
                sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
                success: function success(res) {
                    var localIds = res.localIds; // 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片
                    self.setState({ picSrc: localIds });
                    self.uploadImage(localIds);
                }
            });
        };

        _this.uploadImage = function (localIds) {
            var self = _this;
            localIds = localIds.toString();
            wx.uploadImage({
                localId: localIds, // 需要上传的图片的本地ID，由chooseImage接口获得
                isShowProgressTips: 1, // 默认为1，显示进度提示
                success: function success(res) {
                    var serverId = res.serverId; // 返回图片的服务器端ID
                    self.setState({ serverId: serverId });
                }
            });
        };

        _this.postInform = function () {
            if (_this.state.saleMoney == '') {
                Tool.alert('请输入订单金额');
            } else if (_this.state.name == '') {
                Tool.alert('请输入客户姓名');
            } else if (_this.state.phone == '' || !/^1\d{10}$/.test(_this.state.phone)) {
                Tool.alert('请输入正确的电话号码');
            } else if (_this.state.postProduct.length == 0) {
                Tool.alert('请选择销售的产品');
            } else if (_this.state.picSrc !== '' && _this.state.serverId == '') {
                Tool.alert('图片上传失败，请重新上传图片');
            } else if (_this.state.serverId == '') {
                Tool.alert('请上传售卖发票凭证');
            } else {
                if (_this.state.postProduct instanceof Object) {
                    _this.state.postProduct = JSON.stringify(_this.state.postProduct);
                }
                if (_this.state.preventMountSubmit) {
                    _this.state.preventMountSubmit == false;
                    _this.props.getData('/sales/sales/input', { sales_money: _this.state.saleMoney, customers_name: _this.state.name, customers_phone: _this.state.phone, products: _this.state.postProduct, invoice_ids: _this.state.serverId }, function (res) {
                        if (res.http_code == 200) {
                            Tool.alert(res.data.msg);
                            _this.setState({
                                saleMoney: '',
                                name: '',
                                phone: '',
                                products: [],
                                serverId: '',
                                picSrc: '',
                                postProduct: [],
                                preventMountSubmit: true
                            });
                        } else {
                            _this.state.preventMountSubmit = true;
                            Tool.alert(res.msg);
                        }
                    }, 'input');
                }
            }
        };

        _this.deleteImg = function () {
            _this.setState({ picSrc: '', serverId: '' });
        };

        return _this;
    }

    _createClass(Main, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            // let params = this.props.location.query;
            // if (this.props.producRecord.productList&&this.props.location.search!=='') {
            //     let {productList} = this.props.producRecord;
            //     let num = 0;
            //     productList.forEach((item,index) => {
            //         if (item.chooseState&&item.num>0) {
            //             this.state.products[num] = [item.productName,item.num.toString()];
            //             this.state.postProduct[num] = {};
            //             this.state.postProduct[num]['id'] = item.id;
            //             this.state.postProduct[num]['quantity'] = item.num;
            //             num++;
            //         }
            //     })
            // }
            // this.state.saleMoney = params.saleMoney||'';
            // this.state.name = params.name||'';
            // this.state.phone = params.phone||'';
            // this.state.picSrc = params.picSrc||'';
            // this.state.serverId = params.serverId||'';
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {}
        // const url = window.location.href.split('#')[0];
        // const successFun = (res) => {
        //     wx.config({
        //         debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
        //         appId: res.appId, // 必填，公众号的唯一标识
        //         timestamp: res.timestamp, // 必填，生成签名的时间戳
        //         nonceStr: res.nonceStr, // 必填，生成签名的随机串
        //         signature: res.signature, // 必填，签名，见附录1
        //         jsApiList: ['chooseImage','uploadImage'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2
        //     });
        // }
        //
        // //this.props.getData('core/wx/jssdkNotLogin', {url: url}, successFun, 'jssdk');
        // //获取微信签名，demo不需要
        // wx.ready(() => {
        //     wx.hideOptionMenu();
        // })


        // shouldComponentUpdate(nextProps, nextState) {
        //     return !is(fromJS(this.props), fromJS(nextProps)) || !is(fromJS(this.state),fromJS(nextState))
        // }

        // componentWillUpdate(nextProps,nextState){
        //     if (this.props !== nextProps) {
        //         let {data} = nextProps.state;
        //
        //     }
        // }

    }, {
        key: 'render',
        value: function render() {
            // let products = this.state.products;
            return _react2.default.createElement(
                'div',
                null,
                'hello world!!!......'
            );
        }

        // componentWillUnmount() {
        //     cancelAnimationFrame(this.state.requestID);
        // }

    }]);

    return Main;
}(_react.Component);

exports.default = Main;
// export default template({
//     id: 'index',  //应用关联使用的redux
//     component: Main,//接收数据的组件入口
//     url: ''
// });

/***/ }),

/***/ 294:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @author Félix Girault <felix.girault@gmail.com>
 * @license MIT
 */


var warning = __webpack_require__(1);
var shallowEqual = __webpack_require__(46);



/**
 * Tells if a component should update given it's next props
 * and state.
 *
 * @param object nextProps Next props.
 * @param object nextState Next state.
 */
function shouldComponentUpdate(nextProps, nextState) {
  return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);
}

/**
 * Returns a text description of the component that can be
 * used to identify it in error messages.
 *
 * @see https://github.com/facebook/react/blob/v15.4.0-rc.3/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L1143
 * @param {function} component The component.
 * @return {string} The name of the component.
 */
function getComponentName(component) {
  var constructor = component.prototype && component.prototype.constructor;

  return (
    component.displayName
    || (constructor && constructor.displayName)
    || component.name
    || (constructor && constructor.name)
    || 'a component'
  );
}

/**
 * Makes the given component "pure".
 *
 * @param object component Component.
 */
function pureRenderDecorator(component) {
  if (component.prototype.shouldComponentUpdate !== undefined) {
    // We're not using the condition mecanism of warning()
    // here to avoid useless calls to getComponentName().
    warning(
      false,
      'Cannot decorate `%s` with @pureRenderDecorator, '
      + 'because it already implements `shouldComponentUpdate().',
      getComponentName(component)
    )
  }

  component.prototype.shouldComponentUpdate = shouldComponentUpdate;
  return component;
}



module.exports = pureRenderDecorator;


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,